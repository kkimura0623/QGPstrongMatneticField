Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ILAENV

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ILAENV) [1] ilaenv.f(163,24)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ilaenv.f(213,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 5  
LOOP END

    Report from: Code generation optimizations [cg]

ilaenv.f(256,7):remark #34000: call to _memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 1), and destination (alignment, offset): (16, 0)
ilaenv.f(257,7):remark #34000: call to _memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 3), and destination (alignment, offset): (16, 0)
ilaenv.f(258,7):remark #34000: call to _memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 1), and destination (alignment, offset): (16, 0)
ilaenv.f(163,24):remark #34051: REGISTER ALLOCATION : [_ilaenv_] ilaenv.f:163

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8-r12 r14-r15 mm0-mm2 zmm0]
        
    Routine temporaries
        Total         :     263
            Global    :      61
            Local     :     202
        Regenerable   :      38
        Spilled       :       3
        
    Routine stack
        Variables     :      29 bytes*
            Reads     :      79 [3.42e-01 ~ 0.9%]
            Writes    :      13 [1.79e-01 ~ 0.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
