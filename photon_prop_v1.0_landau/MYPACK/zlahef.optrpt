Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ZLAHEF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ZLAHEF) [1] zlahef.f(158,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at zlahef.f(387,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ zlahef.f(387,22) ]
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at zlahef.f(636,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ zlahef.f(636,22) ]
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END


Non-optimizable loops:


LOOP BEGIN at zlahef.f(227,18)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at zlahef.f(430,13)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at zlahef.f(435,16)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at zlahef.f(464,15)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at zlahef.f(667,10)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at zlahef.f(679,13)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at zlahef.f(684,16)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at zlahef.f(714,15)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

zlahef.f(632,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(632,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(633,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(633,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(635,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(635,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(383,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(383,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(384,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(384,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(386,19):remark #34046: complex divide implemented using x87 instructions to maintain precision.
zlahef.f(386,19):remark #34048: consider using complex-limited-range option to boost run time performance.
zlahef.f(158,18):remark #34051: REGISTER ALLOCATION : [_zlahef_] zlahef.f:158

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   38[ rax rdx rcx rbx rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1274
            Global    :     208
            Local     :    1066
        Regenerable   :     266
        Spilled       :      65
        
    Routine stack
        Variables     :     232 bytes*
            Reads     :     105 [1.24e+02 ~ 4.8%]
            Writes    :     114 [1.19e+02 ~ 4.5%]
        Spills        :     512 bytes*
            Reads     :     212 [2.53e+02 ~ 9.7%]
            Writes    :      81 [5.09e+01 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
