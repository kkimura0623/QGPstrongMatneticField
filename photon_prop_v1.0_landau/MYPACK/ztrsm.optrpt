Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ZTRSM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ZTRSM) [1] ztrsm.f(181,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ztrsm.f(265,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(266,18)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(266,18)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(281,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(283,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(283,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(287,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(290,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(290,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(297,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(299,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(299,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(303,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(306,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(306,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(319,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(320,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(323,34)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ztrsm.f(324,35) ]
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(323,34)
      <Remainder>
      LOOP END

      LOOP BEGIN at ztrsm.f(328,34)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ztrsm.f(329,35) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(337,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(338,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(341,34)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ztrsm.f(342,35) ]
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(341,34)
      <Remainder>
      LOOP END

      LOOP BEGIN at ztrsm.f(346,34)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ztrsm.f(347,35) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(362,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(364,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(364,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(368,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(370,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(370,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ztrsm.f(377,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(377,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(383,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(385,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(385,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(389,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(391,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(391,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ztrsm.f(398,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(398,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(410,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(417,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(417,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(421,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(428,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(428,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ztrsm.f(434,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(434,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ztrsm.f(440,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ztrsm.f(447,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(447,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at ztrsm.f(451,26)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ztrsm.f(458,34)
         remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at ztrsm.f(458,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ztrsm.f(464,30)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ztrsm.f(464,30)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

ztrsm.f(445,31):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(445,31):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(443,31):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(443,31):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(415,31):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(415,31):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(413,31):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(413,31):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(397,27):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(397,27):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(376,27):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(376,27):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(349,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(349,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(344,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(344,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(331,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(331,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(326,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(326,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(305,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(305,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(289,43):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ztrsm.f(289,43):remark #34048: consider using complex-limited-range option to boost run time performance.
ztrsm.f(181,18):remark #34051: REGISTER ALLOCATION : [_ztrsm_] ztrsm.f:181

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   38[ rax rdx rcx rbx rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1440
            Global    :     382
            Local     :    1058
        Regenerable   :      99
        Spilled       :     107
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :      43 [1.93e+00 ~ 0.4%]
            Writes    :      51 [3.89e+00 ~ 0.8%]
        Spills        :     792 bytes*
            Reads     :     229 [1.72e+01 ~ 3.7%]
            Writes    :     146 [1.68e+01 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
