Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ZGERU

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ZGERU) [1] zgeru.f(131,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at zgeru.f(195,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at zgeru.f(198,22)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #25439: unrolled with remainder by 4  
   LOOP END

   LOOP BEGIN at zgeru.f(198,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at zgeru.f(210,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at zgeru.f(214,22)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

zgeru.f(131,18):remark #34051: REGISTER ALLOCATION : [_zgeru_] zgeru.f:131

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     155
            Global    :      56
            Local     :      99
        Regenerable   :      12
        Spilled       :       7
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [9.12e-01 ~ 1.0%]
        Spills        :      24 bytes*
            Reads     :       8 [6.98e-01 ~ 0.8%]
            Writes    :       7 [4.92e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
