Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ZDSCAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ZDSCAL) [1] zdscal.f(53,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at zdscal.f(81,10)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at zdscal.f(81,10)
<Remainder>
LOOP END

LOOP BEGIN at zdscal.f(89,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between zx(i) (90:13) and zx(i) (90:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at zdscal.f(89,10)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

zdscal.f(53,18):remark #34051: REGISTER ALLOCATION : [_zdscal_] zdscal.f:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r11 mm0 zmm0-zmm3]
        
    Routine temporaries
        Total         :      75
            Global    :      26
            Local     :      49
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       6 [3.99e+00 ~ 4.9%]
            Writes    :       6 [3.99e+00 ~ 4.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
